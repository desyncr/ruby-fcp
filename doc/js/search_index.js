var search_data = {"index":{"searchIndex":["communicator","fcpclient","utils","close()","connect()","ddarun()","direct_get()","direct_put()","filehash_maker()","get_plugin_info()","grab_response()","id_generate()","identifier()","keep_alive()","killswitch()","last_response()","list_persistent_requests()","listpeers()","modify_persistent_request()","new()","new_ssk_pair()","packet_mangler()","peerinfo()","proberequest()","put_complex_dir()","send_packet()","simple_dir_put()","simple_get()","simple_put()","sock_thrd()","sort_out()","subscribe_usk()","unsubscribe_usk()","usks_latest()","wait_for()","wait_for_ever()","changelog","readme","license","ruby-fcp.gemspec"],"longSearchIndex":["communicator","fcpclient","utils","communicator#close()","communicator#connect()","fcpclient#ddarun()","fcpclient#direct_get()","fcpclient#direct_put()","utils#filehash_maker()","fcpclient#get_plugin_info()","communicator#grab_response()","utils#id_generate()","fcpclient#identifier()","communicator#keep_alive()","fcpclient#killswitch()","fcpclient#last_response()","fcpclient#list_persistent_requests()","fcpclient#listpeers()","fcpclient#modify_persistent_request()","communicator::new()","fcpclient#new_ssk_pair()","utils#packet_mangler()","fcpclient#peerinfo()","fcpclient#proberequest()","fcpclient#put_complex_dir()","communicator#send_packet()","fcpclient#simple_dir_put()","fcpclient#simple_get()","fcpclient#simple_put()","communicator#sock_thrd()","communicator#sort_out()","fcpclient#subscribe_usk()","fcpclient#unsubscribe_usk()","fcpclient#usks_latest()","fcpclient#wait_for()","fcpclient#wait_for_ever()","","","",""],"info":[["Communicator","","Communicator.html","",""],["FCPClient","","FCPClient.html","",""],["Utils","","Utils.html","",""],["close","Communicator","Communicator.html#method-i-close","()","<p>Send disconnect message and close the socket\n"],["connect","Communicator","Communicator.html#method-i-connect","()",""],["ddarun","FCPClient","FCPClient.html#method-i-ddarun","(directory,read, write)","<p>performs TestDDARequest and TestDDAResponse automagically read and write\nare true or false values\n"],["direct_get","FCPClient","FCPClient.html#method-i-direct_get","(uri ,wait = true, opts={})",""],["direct_put","FCPClient","FCPClient.html#method-i-direct_put","(uri,data, wait = true, opts = {})","<p>Another interface to ClientPut that allows you to directly put data pnto\nfreenet data is your data\n<p>Possible …\n"],["filehash_maker","Utils","Utils.html#method-i-filehash_maker","(ident,filename,conid)",""],["get_plugin_info","FCPClient","FCPClient.html#method-i-get_plugin_info","(pluginname, detailed = false)","<p>returns information on plugin, must be full class name as listed in freenet\ninterface Implements GetPluginInfo …\n"],["grab_response","Communicator","Communicator.html#method-i-grab_response","()",""],["id_generate","Utils","Utils.html#method-i-id_generate","()",""],["identifier","FCPClient","FCPClient.html#method-i-identifier","()","<p>Simple attribute reader for you ConnectionIdentifier\n"],["keep_alive","Communicator","Communicator.html#method-i-keep_alive","()",""],["killswitch","FCPClient","FCPClient.html#method-i-killswitch","()",""],["last_response","FCPClient","FCPClient.html#method-i-last_response","(id)","<p>return last response from request defined by Identifier\n"],["list_persistent_requests","FCPClient","FCPClient.html#method-i-list_persistent_requests","()","<p>List all persistent request just implements ListPersistentRequest\n"],["listpeers","FCPClient","FCPClient.html#method-i-listpeers","()","<p>Straigt forward, ListPeers, sometimes it may choke up and give you end list\npeers before your peers, …\n"],["modify_persistent_request","FCPClient","FCPClient.html#method-i-modify_persistent_request","(id,clienttoken,priorityclass)",""],["new","Communicator","Communicator.html#method-c-new","(client, host='127.0.0.1', port=9481, version = 2.0)","<p>clients name must be unique This performs NodeHello operations upon\ninitialization. Communicator handles …\n"],["new_ssk_pair","FCPClient","FCPClient.html#method-i-new_ssk_pair","()","<p>Uses GenerateSSK\n"],["packet_mangler","Utils","Utils.html#method-i-packet_mangler","(sash,header)",""],["peerinfo","FCPClient","FCPClient.html#method-i-peerinfo","(peer)","<p>returns information on a given peer not peers implements ListPeer\n"],["proberequest","FCPClient","FCPClient.html#method-i-proberequest","(type,hopstolive=25,wait = true)",""],["put_complex_dir","FCPClient","FCPClient.html#method-i-put_complex_dir","(uri, files, wait = true,opts = {})","<p>simpler staight forward interface to ClientPutComplexDir, you provide with\n<p>Possible values of uri:\n<p>CHK …\n"],["send_packet","Communicator","Communicator.html#method-i-send_packet","(message)",""],["simple_dir_put","FCPClient","FCPClient.html#method-i-simple_dir_put","(uri, dir, wait = true, opts={})","<p>Simple directory upload, upload one directory all at once automates the\nTestDDA for you just provide …\n"],["simple_get","FCPClient","FCPClient.html#method-i-simple_get","(uri,directory,wait = true, opts={})","<p>just provide uri and download path/directory Implements ClientGet\n"],["simple_put","FCPClient","FCPClient.html#method-i-simple_put","(uri, filename, wait = true, opts = {})","<p>Simple interface to put a single file onto freenet from your disk uses\nClientPut message\n<p>Possible values …\n"],["sock_thrd","Communicator","Communicator.html#method-i-sock_thrd","()",""],["sort_out","Communicator","Communicator.html#method-i-sort_out","(packet)",""],["subscribe_usk","FCPClient","FCPClient.html#method-i-subscribe_usk","(uri, wait = false ,opts ={})","<p>subscirbe to a usk, have to poll it yourself by using responses\n"],["unsubscribe_usk","FCPClient","FCPClient.html#method-i-unsubscribe_usk","(id)",""],["usks_latest","FCPClient","FCPClient.html#method-i-usks_latest","(uri)",""],["wait_for","FCPClient","FCPClient.html#method-i-wait_for","(id, pattern)","<p>Waits for a specific pattern in a message identified by ID\n"],["wait_for_ever","FCPClient","FCPClient.html#method-i-wait_for_ever","(id)","<p>Just wait and wait given a id\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>0.0.0\n<p>Feautures:\n - Partially working async, gotta tweak with it more, credit\ngoes very much to github.com/freenet/lib-rubyFreenet ...\n"],["README","","README_md.html","","<p>Ruby FCP client library\n==\n<p>Ruby client library to access Freenet. Built upon FCP v2.\n<p>Should be ultra fresh …\n"],["license","","license.html","","<p>This is free and unencumbered software released into the public domain.\n<p>Anyone is free to copy, modify, …\n"],["ruby-fcp.gemspec","","ruby-fcp_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;ruby-fcp&#39;\ns.version     = &#39;0.1.0&#39;\ns.date        = &#39;2014-10-31&#39; ...</pre>\n"]]}}